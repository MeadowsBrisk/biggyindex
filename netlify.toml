[build]
  command = "yarn build"
  publish = ".next"

[build.environment]
  VOTE_WINDOW_HOURS = "24"
  VOTE_HASH_SALT = "24a9935fabe80c4d07f7e06a904bf16ea1e2a67752798c30e762d35685580bf9"
  VOTE_IP_MAX = "500"
  VOTE_DEBUG = "1"
  NODE_VERSION = "20"

[template.environment]
  VOTE_WINDOW_HOURS = "24"
  VOTE_HASH_SALT = "24a9935fabe80c4d07f7e06a904bf16ea1e2a67752798c30e762d35685580bf9"
  VOTE_IP_MAX = "500"
  VOTE_DEBUG = "1"  # Enable verbose vote debug logging during troubleshooting

# Global functions configuration
[functions]
  node_bundler = "esbuild"
  external_node_modules = [
    "axios",
  "http-cookie-agent",
  "agent-base",
    "tough-cookie",
  "node-fetch",
    "@netlify/blobs",
    "@netlify/neon",
    "yargs",
    "p-queue"
  ]

[[plugins]]
package = "netlify-plugin-inngest"

  # Ensure the plugin targets our Netlify Function path (not Next.js default /api/inngest)
  [plugins.inputs]
    path = "/.netlify/functions/inngest-handler"

# Local dev: proxy to the already-running Next.js dev server on port 3000
[dev]
  # Proxy to an already-running Next.js dev server on port 3000
  targetPort = 3000
  port = 8888

# Functions (Next.js pages/api are auto-detected)
# Add any specific function configuration overrides here if needed in future.

[functions."site-index"]
  # Run the indexing function every 10 minutes (on the hour and half past)
  schedule = "*/15 * * * *"
  # Ensure the raw script & its data file are packaged with the function so spawning works.
  included_files = [
  "scripts/indexer/**",
  # Include aggregated supplement so embedAggregates can require it at runtime on Netlify (outdated: exclusively using Blobs rather than FS now)
  "public/item-crawler/index-supplement.js",
  # If you generate per-run artifacts (debug, items, share-links), you can optionally include them too:
  # "public/item-crawler/**"
    ]

### Unified background stages (items and sellers) on separate schedules
[functions."crawler-items-background"]
  # Items stage: every 4 hours on the hour
  schedule = "0 */4 * * *"
  node_bundler = "esbuild"
  included_files = [
    "scripts/unified-crawler/**"
  ]
  [functions."crawler-items-background".environment]
  CRAWLER_PERSIST = "blobs"

[functions."crawler-sellers-background"]
  # Sellers stage: every 4 hours, offset by 2 hours from items
  schedule = "0 2,6,10,14,18,22 * * *"
  node_bundler = "esbuild"
  included_files = [
    "scripts/unified-crawler/**"
  ]
  [functions."crawler-sellers-background".environment]
  CRAWLER_PERSIST = "blobs"

[functions."crawler-control"]
  # Lightweight control plane for the crawler (set/clear stop flag)
  node_bundler = "esbuild"

[functions."crawler-index"]
  # Unified indexer (replacement for legacy site-index). Runs every 15 minutes.
  schedule = "*/15 * * * *"
  node_bundler = "esbuild"
  included_files = [
    "scripts/unified-crawler/**"
  ]
  [functions."crawler-index".environment]
  # Set to 1 when ready to cut over from legacy site-index
  CRAWLER_UNIFIED_INDEX = "0"

# Orchestrator kept for manual triggers/dev; not scheduled to avoid overlap with stage-specific schedules
[functions."crawler-all-markets-background"]
  node_bundler = "esbuild"
  included_files = [
    "scripts/unified-crawler/**"
  ]

# Inngest handler function-specific configuration
# INNGEST_EVENT_KEY and INNGEST_SIGNING_KEY should be set in Netlify UI env vars (site settings)
# For local dev, export INNGEST_SIGNING_KEY and INNGEST_SERVE_HOST in your shell before `netlify dev`

[functions."inngest-handler"]
  # Regular function - Inngest Cloud handles async execution, not Netlify background functions
  node_bundler = "esbuild"
  # External modules needed by unified crawler
  included_files = [
    "scripts/unified-crawler/**",
    "scripts/item-crawler/auth/**",
    "scripts/item-crawler/fetch/**",
    "scripts/item-crawler/parse/**",
    "scripts/item-crawler/util/**",
    "public/indexed_items.json"
  ]

# Route common Inngest probe paths to our handler to avoid 404 noise in dev
#[[redirects]]
#  from = "/api/inngest"
#  to = "/.netlify/functions/inngest-handler"
#  status = 200

#[[redirects]]
#  from = "/.redwood/functions/inngest"
#  to = "/.netlify/functions/inngest-handler"
#  status = 200

#[[redirects]]
#  from = "/x/inngest"
#  to = "/.netlify/functions/inngest-handler"
#  status = 200
